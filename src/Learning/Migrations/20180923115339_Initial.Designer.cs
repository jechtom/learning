// <auto-generated />
using System;
using Learning.DA;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Learning.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20180923115339_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Learning.DA.AccessToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ActivationDate");

                    b.Property<string>("Name");

                    b.Property<string>("Token")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("Learning.DA.GivenAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OwnerId");

                    b.Property<int>("QuestionId");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("GivenAnswers");
                });

            modelBuilder.Entity("Learning.DA.GivenAnswerToQuestionOption", b =>
                {
                    b.Property<int>("GivenAnswerId");

                    b.Property<int>("QuestionOptionId");

                    b.HasKey("GivenAnswerId", "QuestionOptionId");

                    b.HasIndex("QuestionOptionId");

                    b.ToTable("GivenAnswerToQuestionOption");
                });

            modelBuilder.Entity("Learning.DA.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<int?>("QuestionsGroupId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("QuestionsGroupId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Learning.DA.QuestionOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<bool>("IsCorrect");

                    b.Property<int>("QuestionId");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionOptions");
                });

            modelBuilder.Entity("Learning.DA.QuestionsGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsEnabled");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("QuestionsGroups");
                });

            modelBuilder.Entity("Learning.DA.GivenAnswer", b =>
                {
                    b.HasOne("Learning.DA.AccessToken", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Learning.DA.Question", "Question")
                        .WithMany("GivenAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Learning.DA.GivenAnswerToQuestionOption", b =>
                {
                    b.HasOne("Learning.DA.GivenAnswer", "GivenAnswer")
                        .WithMany("SelectedQuestionOptions")
                        .HasForeignKey("GivenAnswerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Learning.DA.QuestionOption", "QuestionOption")
                        .WithMany("GivenAnswers")
                        .HasForeignKey("QuestionOptionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Learning.DA.Question", b =>
                {
                    b.HasOne("Learning.DA.QuestionsGroup", "QuestionsGroup")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionsGroupId");
                });

            modelBuilder.Entity("Learning.DA.QuestionOption", b =>
                {
                    b.HasOne("Learning.DA.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
